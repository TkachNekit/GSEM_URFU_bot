import datetime
import functools
import logging
import os

from telegram import Update
from telegram.ext import CommandHandler, ContextTypes, MessageHandler, filters

from src.services import telegram_services
from src.services.auth_services import (
    download_file,
    generate_tokens_for_users,
    is_admin_request,
    upload_tokens_to_db, validate_token, logout_user, get_current_token_for_user,
)
from src.services.session_services import create_new_session, upload_session_to_db, mark_token_as_used, is_token_used, \
    is_user_logged_in, mark_progress
from src.services.task_tester_service import run_test
from src.utils import bot_commands
from src.utils.exceptions import (
    AdminAccessDenied,
    AlreadyUsedToken,
    InvalidDateError,
    InvalidSessionToken,
    NoArgumentsInLogin,
    TooManyArgumentsInLogin,
    WrongDateFormatError, AlreadyLoggedInAccount, LogoutError, WrongPythonFileName, TokenNotFoundError,
    WrongAnswerError, PepTestError,
)
from src.utils.formaters import format_dict_to_string
from src.utils.validators import validate_args, validate_datetime_args, validate_filename

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

_ADMIN_USERNAMES = "ADMIN_USERNAMES"
STUDENT_FILE_NAME = "src/data/students.txt"
ADMIN_USERNAMES = os.environ.get(_ADMIN_USERNAMES).split(" ")


def get_handlers() -> list:
    return [
        CommandHandler(bot_commands.LOGIN, login),
        CommandHandler(bot_commands.LOGOUT, logout),
        MessageHandler(filters.Document.PY, py_file_handler),
        MessageHandler(filters.Document.TXT, students_downloader),
    ]


def _response(text_func):
    @functools.wraps(text_func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = await text_func(update, context)
        await telegram_services.response(update, context, text)

    return wrapper


@_response
async def login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        args = context.args
        await validate_args(args)
        token = args[0]
        if await validate_token(token):
            raise InvalidSessionToken
        if await is_token_used(token):
            raise AlreadyUsedToken
        if await is_user_logged_in(update.effective_user.username):
            raise AlreadyLoggedInAccount
        session = await create_new_session(token, update.effective_user.username, update.effective_user.id)
        await upload_session_to_db(session)
        await mark_token_as_used(token, update.effective_user.username)
        return "üëç [–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è] üëç"
    except TooManyArgumentsInLogin:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ù–µ –±—ã–ª –¥–∞–Ω —Ç–æ–∫–µ–Ω    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: /login <TOKEN>"
    except NoArgumentsInLogin:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ù–µ –±—ã–ª –¥–∞–Ω —Ç–æ–∫–µ–Ω    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: /login <TOKEN>"
    except AlreadyUsedToken:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ë—ã–ª –¥–∞–Ω —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
    except InvalidSessionToken:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ë—ã–ª –¥–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω"
    except AlreadyLoggedInAccount:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"


@_response
async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    return "–ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ"
    # try:
    #     if not await is_user_logged_in(update.effective_user.username):
    #         raise LogoutError
    #     await logout_user(update.effective_user.username)
    #
    #     return "üëç [–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥] üëç"
    # except LogoutError:
    #     return "[–û—à–∏–±–∫–∞]    –î–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"


@_response
async def students_downloader(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        if not await is_admin_request(update.effective_user.username, ADMIN_USERNAMES):
            raise AdminAccessDenied
        date = await validate_datetime_args(update.message.caption)
        await download_file(update, context, STUDENT_FILE_NAME)
        token_dict = await generate_tokens_for_users(STUDENT_FILE_NAME, date)
        await upload_tokens_to_db(token_dict)

        output = "üëç [–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤] üëç\n\n\n" + await format_dict_to_string(
            token_dict
        )
        return output
    except AdminAccessDenied:
        return "[–û—à–∏–±–∫–∞]    –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
    except TooManyArgumentsInLogin and NoArgumentsInLogin:
        return "[–û—à–∏–±–∫–∞]    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 01.01.2023"
    except WrongDateFormatError:
        return "[–û—à–∏–±–∫–∞]    –î–∞—Ç–∞ –±—ã–ª–∞ –¥–∞–Ω–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 01.01.2023"
    except InvalidDateError:
        return f"[–û—à–∏–±–∫–∞]   –ë—ã–ª–∞ –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞   \n–£–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —á–µ–º " \
               f"{datetime.datetime.now().date().strftime('%d.%m.%Y')}"


@_response
async def py_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        await validate_filename(update.message.document.file_name)
        token = await get_current_token_for_user(update.effective_user.username)
        filepath = await download_file(update, context, update.message.document.file_name, token)

        # —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        result = await run_test(filepath, update.message.document.file_name)
        await mark_progress(token, update.message.document.file_name)
        return result + "–≠—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥, –∑–∞–¥–∞—á–∞ –∑–∞—á—Ç–µ–Ω–∞ üëç"
    except WrongPythonFileName:
        return "[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]    –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: task1, –∏–ª–∏ task2, –∏–ª–∏ task3..."
    except TooManyArgumentsInLogin and NoArgumentsInLogin:
        return "[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]    –ë—ã–ª –¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫      –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: task1, –∏–ª–∏ task2, –∏–ª–∏ task3..."
    except TokenNotFoundError:
        return "[–û—à–∏–±–∫–∞]    –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é"
    except WrongAnswerError:
        return "[–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç]    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    except PepTestError:
        return "[–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç]    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ PEP8 –≤–∞–ª–∏–¥–∞—Ü–∏—é"
