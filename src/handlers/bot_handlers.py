import datetime
import functools
import logging
import os

from telegram import Update
from telegram.ext import CommandHandler, ContextTypes, MessageHandler, filters

from src.services import telegram_services
from src.services.auth_services import (
    deactivate_session,
    download_py_file,
    download_txt_file,
    generate_tokens_for_users,
    is_admin_request,
    log_in_new_user,
    log_in_user,
    upload_tokens_to_db,
)
from src.services.session_services import (
    create_new_session,
    get_current_token_for_user,
    get_progress,
    is_token_in_use,
    is_user_logged_in,
    mark_progress,
    validate_login,
    was_token_used_before,
)
from src.services.task_tester_service import run_test
from src.utils import bot_commands
from src.utils.exceptions import (
    AdminAccessDenied,
    AlreadyLoggedInAccount,
    InvalidDateError,
    InvalidSessionToken,
    NoActiveSessionError,
    NoArgumentsInLogin,
    PepTestError,
    TokenAlreadyInUseError,
    TokenNotFoundError,
    TooManyArgumentsInLogin,
    WrongAnswerError,
    WrongDateFormatError,
    WrongPythonFileName,
)
from src.utils.formaters import format_dict_to_string, format_progress_to_str
from src.utils.validators import validate_datetime_args, validate_filename

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

_ADMIN_USERNAMES = "ADMIN_USERNAMES"
STUDENT_FILE_NAME = "src/data/students.txt"
ADMIN_USERNAMES = os.environ.get(_ADMIN_USERNAMES).split(" ")


def get_handlers() -> list:
    return [
        CommandHandler(bot_commands.LOGIN, login),
        CommandHandler(bot_commands.LOGIN_STATUS, login_status),
        CommandHandler(bot_commands.PROGRESS, progress),
        CommandHandler(bot_commands.LOGOUT, logout),
        MessageHandler(filters.Document.PY, py_file_handler),
        MessageHandler(filters.Document.TXT, students_downloader),
        CommandHandler(bot_commands.UPLOAD_STUDENT_PROGRESS, upload_student_progress),
    ]


def _response(text_func):
    @functools.wraps(text_func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = await text_func(update, context)
        await telegram_services.response(update, context, text)

    return wrapper


@_response
async def login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        args = context.args
        username = update.effective_user.username
        tg_id = update.effective_user.id
        token = await validate_login(username, args)
        if await is_token_in_use(token):
            raise TokenAlreadyInUseError
        if await was_token_used_before(token):
            await log_in_user(token, username, tg_id)
        else:
            await log_in_new_user(token, username, tg_id)
        return "üëç [–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è] üëç"
    except TooManyArgumentsInLogin:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ù–µ –±—ã–ª –¥–∞–Ω —Ç–æ–∫–µ–Ω    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: /login <TOKEN>"
    except NoArgumentsInLogin:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ù–µ –±—ã–ª –¥–∞–Ω —Ç–æ–∫–µ–Ω    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: /login <TOKEN>"
    except TokenAlreadyInUseError:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ë—ã–ª –¥–∞–Ω —Ç–æ–∫–µ–Ω, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã"
    except InvalidSessionToken:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ë—ã–ª –¥–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω"
    except AlreadyLoggedInAccount:
        return "[–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏]    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"


@_response
async def login_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    username = update.effective_user.username
    if await is_user_logged_in(username):
        token = await get_current_token_for_user(username)
        return f'[–°—Ç–∞—Ç—É—Å]    –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ–¥ "{token}"'
    else:
        return "[–°—Ç–∞—Ç—É—Å]    –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"


@_response
async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        if not await is_user_logged_in(update.effective_user.username):
            raise NoActiveSessionError
        progress_dict = await get_progress(update.effective_user.username)
        return "[–ü—Ä–æ–≥—Ä–µ—Å—Å]\n" + await format_progress_to_str(progress_dict)
    except NoActiveSessionError:
        return "[–û—à–∏–±–∫–∞]    –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"


@_response
async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        username = update.effective_user.username
        await deactivate_session(username)
        return "üëç [–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥] üëç"
    except NoActiveSessionError:
        return "[–û—à–∏–±–∫–∞]    –î–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"


@_response
async def students_downloader(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> str:
    try:
        if not await is_admin_request(update.effective_user.username, ADMIN_USERNAMES):
            raise AdminAccessDenied
        date = await validate_datetime_args(update.message.caption)
        await download_txt_file(update, context, STUDENT_FILE_NAME)
        token_dict = await generate_tokens_for_users(STUDENT_FILE_NAME, date)
        await upload_tokens_to_db(token_dict)

        output = "üëç [–£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤] üëç\n\n\n" + await format_dict_to_string(
            token_dict
        )
        return output
    except AdminAccessDenied:
        return "[–û—à–∏–±–∫–∞]    –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
    except TooManyArgumentsInLogin and NoArgumentsInLogin:
        return "[–û—à–∏–±–∫–∞]    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 01.01.2023"
    except WrongDateFormatError:
        return "[–û—à–∏–±–∫–∞]    –î–∞—Ç–∞ –±—ã–ª–∞ –¥–∞–Ω–∞ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 01.01.2023"
    except InvalidDateError:
        return (
            f"[–û—à–∏–±–∫–∞]   –ë—ã–ª–∞ –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞   \n–£–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —á–µ–º "
            f"{datetime.datetime.now().date().strftime('%d.%m.%Y')}"
        )


@_response
async def py_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    try:
        await validate_filename(update.message.document.file_name)
        token = await get_current_token_for_user(update.effective_user.username)
        filepath = await download_py_file(
            update, context, update.message.document.file_name, token
        )
        result = await run_test(filepath, update.message.document.file_name)
        await mark_progress(token, update.message.document.file_name)
        return result + "–≠—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥, –∑–∞–¥–∞—á–∞ –∑–∞—á—Ç–µ–Ω–∞ üëç"
    except WrongPythonFileName:
        return "[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]    –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞    –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: task1, –∏–ª–∏ task2, –∏–ª–∏ task3..."
    except TooManyArgumentsInLogin and NoArgumentsInLogin:
        return "[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]    –ë—ã–ª –¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫      –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: task1, –∏–ª–∏ task2, –∏–ª–∏ task3..."
    except TokenNotFoundError:
        return "[–û—à–∏–±–∫–∞]    –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é"
    except WrongAnswerError:
        return "[–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç]    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    except PepTestError:
        return "[–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç]    –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ PEP8 –≤–∞–ª–∏–¥–∞—Ü–∏—é"


async def upload_student_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """FOR ADMIN ONLY! Handler controls uploading students progress to google spreadsheets"""
    pass
